package reports;

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.jdbc.core.JdbcTemplate;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private OrgStructureRepository orgStructureRepository;

    @Autowired
    private AttendanceRepository attendanceRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate; // Let us see if it can help to execute sql

    private OrgStructure o;
    private Attendance a;


    @GetMapping(path="/loadAttendance")
    public @ResponseBody String loadAttendance(){
        try {
            FileReader fr = new FileReader("/Users/ahilan/Documents/Work/Enablement Reporting/Attendance_Rawdata.csv");
            BufferedReader br = new BufferedReader(fr);
            String strLine;
            while ((strLine = br.readLine()) != null) {

               a = new Attendance();

               String[] lineDataList = strLine.split(",");
               a.setEventNo(lineDataList[0]);
               a.setEventName(lineDataList[1]);
               a.setParticipantName(lineDataList[2]);
               a.setCompany(lineDataList[3]);
               a.setTopLevelManager("");
               a.setManager1("");
               a.setManager2("");
               a.setManager3("");
               a.setManager4("");
               a.setManager5("");

               attendanceRepository.save(a);
              /*  for (String data : lineDataList){
                    System.out.println("The data is :"+data);
                }*/

                System.out.println("Saved Attendee...");
            }
            br.close();
            fr.close();


        }catch(Exception e){e.printStackTrace();}
        return "load Attendance called....";
    }


    @GetMapping(path="/loadOrg")
    public @ResponseBody String loadOrgStructure(){

        try {
            FileReader fr = new FileReader("/Users/ahilan/Documents/Work/Enablement Reporting/Rawdata.csv");
            BufferedReader br = new BufferedReader(fr);
            String strLine;
            while ((strLine = br.readLine()) != null) {
                o = new OrgStructure();

                String[] lineDataList = strLine.split(",");
                o.setUniqueId(lineDataList[0]);
                o.setName(lineDataList[1]);
                o.setReportsTo(lineDataList[2]);
                o.setLineDetail1(lineDataList[3]);
                o.setLineDetail2(lineDataList[4]);
                o.setTopLevelManager("");
                o.setManager1("");
                o.setManager2("");
                o.setManager3("");
                o.setManager4("");
                o.setManager5("");

                orgStructureRepository.save(o);
              /*  for (String data : lineDataList){
                    System.out.println("The data is :"+data);
                }*/

                System.out.println("Saved...");
            }
            br.close();
            fr.close();


        }catch(Exception e){e.printStackTrace();}
        return "load Org called";
    }

    @GetMapping(path="/formatData")
    //@Transactional
    public @ResponseBody String formatData()
    {
        List<OrgStructure> orgs = new ArrayList<OrgStructure>();
        String mgrID = "";
        //Iterate Through unique Top level managers

        List<Map<String,Object>> rows_MGR = jdbcTemplate.queryForList("select * from emp_db.org_structure where reports_to in  ('0_Kang_Choi_(1042972)','Jeff Casale')");
        for (Map<String, Object> row_MGR : rows_MGR) {
            mgrID = ""+row_MGR.get("UNIQUE_ID");
            List<Map<String, Object>> rows = jdbcTemplate.queryForList("select * from org_structure where reports_to=?", new Object[]{mgrID});
            //System.out.println("=================The total number of rows is :" + rows.size());
            for (Map<String, Object> row : rows) {
                o = new OrgStructure();
                String strID = "" + row.get("UNIQUE_ID");
                System.out.println("Unique ID is :" + strID);
                jdbcTemplate.update("update emp_db.org_structure set top_level_manager = ? where unique_id = ?", new Object[]{mgrID, strID});

                //Iterate through next level
                List<Map<String, Object>> rows_L1 = jdbcTemplate.queryForList("select * from org_structure where reports_to=?", new Object[]{strID});
                for (Map<String, Object> row_L1 : rows_L1) {
                    System.out.println("***** L1 Unique ID is : " + row_L1.get("UNIQUE_ID") + ": StrID : " + strID);
                    jdbcTemplate.update("update emp_db.org_structure set top_level_manager = ? , manager1 = ? where unique_id = ?", new Object[]{mgrID, strID, row_L1.get("UNIQUE_ID")});

                    String strID1 = "" + row_L1.get("UNIQUE_ID");
                    List<Map<String, Object>> rows_L2 = jdbcTemplate.queryForList("select * from org_structure where reports_to=?", new Object[]{strID1});
                    for (Map<String, Object> row_L2 : rows_L2) {
                        System.out.println("********** L2 Unique ID is : " + row_L2.get("UNIQUE_ID") + ": StrID1 : " + strID1);
                        jdbcTemplate.update("update emp_db.org_structure set top_level_manager = ? , manager1 = ? , manager2 = ? where unique_id = ?", new Object[]{mgrID, strID, strID1, row_L2.get("UNIQUE_ID")});


                        //Iterate Level 3
                        String strID2 = "" + row_L2.get("UNIQUE_ID");
                        List<Map<String, Object>> rows_L3 = jdbcTemplate.queryForList("select * from org_structure where reports_to=?", new Object[]{strID2});
                        for (Map<String, Object> row_L3 : rows_L3) {
                            System.out.println("**************** L3 Unique ID is : " + row_L3.get("UNIQUE_ID") + ": StrID2 : " + strID2);
                            jdbcTemplate.update("update emp_db.org_structure set top_level_manager = ? , manager1 = ? , manager2 = ? , manager3 = ? where unique_id = ?", new Object[]{mgrID, strID, strID1, strID2, row_L3.get("UNIQUE_ID")});


                            //Iterate level 4 (Last level)
                            String strID3 = "" + row_L3.get("UNIQUE_ID");
                            List<Map<String, Object>> rows_L4 = jdbcTemplate.queryForList("select * from org_structure where reports_to=?", new Object[]{strID3});
                            for (Map<String, Object> row_L4 : rows_L4) {
                                System.out.println("********************* L4 Unique ID is : " + row_L4.get("UNIQUE_ID") + ": StrID3 : " + strID3);
                                jdbcTemplate.update("update emp_db.org_structure set top_level_manager = ? , manager1 = ? , manager2 = ? , manager3 = ? ,manager4 = ? where unique_id = ?", new Object[]{mgrID, strID, strID1, strID2, strID3, row_L4.get("UNIQUE_ID")});

                                //Iterate 5th Level manager ##last level

                                String strID4 = "" + row_L4.get("UNIQUE_ID");
                                List<Map<String, Object>> rows_L5 = jdbcTemplate.queryForList("select * from org_structure where reports_to=?", new Object[]{strID4});
                                for (Map<String, Object> row_L5 : rows_L5) {
                                    System.out.println("************************** L5 Unique ID is : " + row_L5.get("UNIQUE_ID") + ": StrID4 : " + strID4);
                                    jdbcTemplate.update("update emp_db.org_structure set top_level_manager = ? , manager1 = ? , manager2 = ? , manager3 = ? ,manager4 = ?, manager5=? where unique_id = ?", new Object[]{mgrID, strID, strID1, strID2, strID3,strID4, row_L5.get("UNIQUE_ID")});
                                }
                            }

                        }

                    }
                }

            }
        }
        return "success";
    }



    @GetMapping(path="/updateAttendance")
    public @ResponseBody String updateAttendance()
    {
        String strTLM = "";
        String strMGR1 ="";
        String strMGR2 ="";
        String strMGR3 ="";
        String strMGR4 ="";


        List<Map<String,Object>> rows = jdbcTemplate.queryForList("select * from attendance" );
        System.out.println("=================The total number of rows is :"+ rows.size());
        for (Map<String, Object> row : rows) {
            System.out.println(" Name :"+ row.get("PARTICIPANT_NAME"));
            List<Map<String,Object>> rows_Org = jdbcTemplate.queryForList("select * from org_structure where trim(SUBSTRING_INDEX(name, '(', 1))=?", new Object[] {row.get("PARTICIPANT_NAME")} );
            //Use the data from the first row
            if(rows_Org.size() > 0){
                System.out.println(" Top level mgr : " + rows_Org.get(0).get("TOP_LEVEL_MANAGER"));
                jdbcTemplate.update("update attendance set top_level_manager = ?, manager1 = ? , manager2 = ? , manager3 = ? ,manager4 = ?,manager5 = ? where id = ?", new Object[]{rows_Org.get(0).get("TOP_LEVEL_MANAGER"),rows_Org.get(0).get("MANAGER1"),rows_Org.get(0).get("MANAGER2"),rows_Org.get(0).get("MANAGER3"),rows_Org.get(0).get("MANAGER4"),rows_Org.get(0).get("MANAGER5"),row.get("ID")});


            }

        }
        //One more Iteration with Last name match for firstname mismatch eg ) David -> Dave, Joseph -> Joe etc. The following iteration matches lastname and first letter of first name and updates the records.

        List<Map<String,Object>> rows_M = jdbcTemplate.queryForList("select id,participant_name, substring(participant_name,1,1) as firstletter, substring_index(participant_name,' ',-1) as lastname from emp_db.attendance WHERE TOP_LEVEL_MANAGER = '' and COMPANY = 'DellEMC'" );
        for (Map<String, Object> row_M : rows_M) {
            System.out.println("===== Second Pass  FirstLetter :" + row_M.get("FIRSTLETTER") +" last name : "+ row_M.get("LASTNAME") );
            List<Map<String, Object>> rows_OrgM = jdbcTemplate.queryForList("select * from org_structure where trim(substring_index(substring_index(name,'(',1),' ',-2))=? and substring(name,1,1) = ?", new Object[]{row_M.get("LASTNAME"),row_M.get("FIRSTLETTER")});
            //Use the data from the first row
            if (rows_OrgM.size() > 0) {
                System.out.println( "++++++++++++++++++++++ Second Pass ID : "+ row_M.get("ID") +" lastname :" +row_M.get("LASTNAME"));
                jdbcTemplate.update("update attendance set top_level_manager = ?, manager1 = ? , manager2 = ? , manager3 = ? ,manager4 = ?, manager5 = ? where id = ?", new Object[]{rows_OrgM.get(0).get("TOP_LEVEL_MANAGER"),rows_OrgM.get(0).get("MANAGER1"),rows_OrgM.get(0).get("MANAGER2"),rows_OrgM.get(0).get("MANAGER3"),rows_OrgM.get(0).get("MANAGER4"),rows_OrgM.get(0).get("MANAGER5"),row_M.get("ID")});

            }
        }
        return "Update Attendance Called ...";
    }


    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String firstname
            , @RequestParam String lastname
            , @RequestParam String email
            , @RequestParam String addressLine1
            , @RequestParam String addressLine2
            , @RequestParam String city
            , @RequestParam String state
            , @RequestParam String zipcode
     ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setFirstName(firstname);
        n.setLastname(lastname);
        //n.setLastName(lastname);
        n.setEmail(email);
        n.setAddressline1(addressLine1);
        n.setAddressLine2(addressLine2);
        n.setCity(city);
        n.setState(state);
        n.setZipcode(zipcode);

        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}